#+TITLE: Learning plans
My Learning plan adapted from Coding interview university
* Algorithmic complexity / Big-O / Asymptotic analysis
   :PROPERTIES:
   :CUSTOM_ID: algorithmic-complexity-big-o-asymptotic-analysis
   :END:

- Nothing to implement
- There are a lot of videos here. Just watch enough until you understand it. You can always come back and review.
- If some lectures are too mathy, you can jump down to the bottom and watch the discrete mathematics videos to get the background knowledge.
- ☐ [[https://www.youtube.com/watch?v=iOq5kSKqeR4][Harvard CS50 - Asymptotic Notation (video)]]
- ☐ [[https://www.youtube.com/watch?v=V6mKVRU1evU][Big O Notations (general quick tutorial) (video)]]
- ☐ [[https://www.youtube.com/watch?v=ei-A_wy5Yxw&index=2&list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN][Big O Notation (and Omega and Theta) - best mathematical explanation (video)]]
- ☐ Skiena:

  - [[https://www.youtube.com/watch?v=gSyDMtdPNpU&index=2&list=PLOtl7M3yp-DV69F32zdK7YJcNXpTunF2b][video]]
  - [[https://archive.org/details/lecture2_202008][slides]]

- ☐ [[http://discrete.gr/complexity/][A Gentle Introduction to Algorithm Complexity Analysis]]
- ☐ [[https://www.coursera.org/lecture/algorithmic-thinking-1/orders-of-growth-6PKkX][Orders of Growth (video)]]
- ☐ [[https://www.coursera.org/lecture/algorithmic-thinking-1/asymptotics-bXAtM][Asymptotics (video)]]
- ☐ [[https://archive.org/details/ucberkeley_webcast_VIS4YDpuP98][UC Berkeley Big O (video)]]
- ☐ [[https://archive.org/details/ucberkeley_webcast_ca3e7UVmeUc][UC Berkeley Big Omega (video)]]
- ☐ [[https://www.youtube.com/watch?v=B3SpQZaAZP4&index=10&list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN][Amortized Analysis (video)]]
- ☐ [[https://www.coursera.org/lecture/algorithmic-thinking-1/illustrating-big-o-YVqzv][Illustrating "Big O" (video)]]
- ☐ TopCoder (includes recurrence relations and master theorem):

  - [[https://www.topcoder.com/community/competitive-programming/tutorials/computational-complexity-section-1/][Computational Complexity: Section 1]]
  - [[https://www.topcoder.com/community/competitive-programming/tutorials/computational-complexity-section-2/][Computational Complexity: Section 2]]

- ☐ [[http://bigocheatsheet.com/][Cheat sheet]]

* Data Structures
   :PROPERTIES:
   :CUSTOM_ID: data-structures
   :END:
** Arrays
      :PROPERTIES:
      :CUSTOM_ID: arrays
      :END:

  - Implement an automatically resizing vector.
  - ☐ Description:
   - [[https://www.coursera.org/lecture/data-structures/arrays-OsBSF][Arrays (video)]]
   - [[https://archive.org/details/ucberkeley_webcast_Wp8oiO_CZZE][UC Berkeley CS61B - Linear and Multi-Dim Arrays (video)]] (Start watching from 15m 32s)
   - [[https://archive.org/details/0102WhatYouShouldKnow/02_04-basicArrays.mp4][Basic Arrays (video)]]
   - [[https://archive.org/details/0102WhatYouShouldKnow/02_05-multidimensionalArrays.mp4][Multi-dim (video)]]
   - [[https://www.coursera.org/lecture/data-structures/dynamic-arrays-EwbnV][Dynamic Arrays (video)]]
   - [[https://www.youtube.com/watch?v=1jtrQqYpt7g][Jagged Arrays (video)]]
   - [[https://archive.org/details/0102WhatYouShouldKnow/02_06-jaggedArrays.mp4][Jagged Arrays (video)]]
   - [[https://archive.org/details/0102WhatYouShouldKnow/03_01-resizableArrays.mp4][Resizing arrays (video)]]

*** TODO Implement a vector (mutable array with automatic resizing):

**** TODO Practice coding using arrays and pointers, and pointer math to jump to an index instead of using indexing.
**** TODO New raw data array with allocated memory

     - can allocate int array under the hood, just not use its features
     - start with 16, or if starting number is greater, use power of 2 - 16, 32, 64, 128

**** TODO size() - number of items
**** TODO capacity() - number of items it can hold
**** TODO is_empty()
**** TODO at(index) - returns item at given index, blows up if index out of bounds
**** TODO push(item)
**** TODO insert(index, item) - inserts item at index, shifts that index's value and trailing elements to the right
**** TODO prepend(item) - can use insert above at index 0
**** TODO pop() - remove from end, return value
**** TODO delete(index) - delete item at index, shifting all trailing elements left
**** TODO remove(item) - looks for value and removes index holding it (even if in multiple places)
**** TODO find(item) - looks for value and returns first index with that value, -1 if not found
**** TODO resize(new_capacity) // private function
- when you reach capacity, resize to double the size
- when popping an item, if size is 1/4 of capacity, resize to half

*** TODO Time

   - O(1) to add/remove at end (amortized for allocations for more space), index, or update
   - O(n) to insert/remove elsewhere

*** TODO Space

   - contiguous in memory, so proximity helps performance
   - space needed = (array capacity, which is >= n) * size of item, but even if 2n, still O(n)

** Linked Lists
      :PROPERTIES:
      :CUSTOM_ID: linked-lists
      :END:

*** TODO Description:

***** TODO [[https://www.coursera.org/lecture/data-structures/singly-linked-lists-kHhgK][Singly Linked Lists (video)]]
***** TODO [[https://archive.org/details/ucberkeley_webcast_htzJdKoEmO0][CS 61B - Linked Lists 1 (video)]]
***** TODO [[https://archive.org/details/ucberkeley_webcast_-c4I3gFYe3w][CS 61B - Linked Lists 2 (video)]]

*** TODO [[https://www.youtube.com/watch?v=QN6FPiD0Gzo][C Code (video)]] - not the whole video, just portions about Node struct and memory allocation.
*** TODO Linked List vs Arrays:

    - [[https://www.coursera.org/lecture/data-structures-optimizing-performance/core-linked-lists-vs-arrays-rjBs9][Core Linked Lists Vs Arrays (video)]]
    - [[https://www.coursera.org/lecture/data-structures-optimizing-performance/in-the-real-world-lists-vs-arrays-QUaUd][In The Real World Linked Lists Vs Arrays (video)]]

*** TODO [[https://www.youtube.com/watch?v=YQs6IC-vgmo][why you should avoid linked lists (video)]]
*** TODO Gotcha: you need pointer to pointer knowledge: (for when you pass a pointer to a function that may change the address where that pointer points) This page is just to get a grasp on ptr to ptr. I don't recommend this list traversal style. Readability and maintainability suffer due to cleverness.

    - [[https://www.eskimo.com/~scs/cclass/int/sx8.html][Pointers to Pointers]]

*** TODO Implement (I did with tail pointer & without):

***** TODO size() - returns number of data elements in list
***** TODO empty() - bool returns true if empty
***** TODO value_at(index) - returns the value of the nth item (starting at 0 for first)
***** TODO push_front(value) - adds an item to the front of the list
***** TODO pop_front() - remove front item and return its value
***** TODO push_back(value) - adds an item at the end
***** TODO pop_back() - removes end item and returns its value
***** TODO front() - get value of front item
***** TODO back() - get value of end item
***** TODO insert(index, value) - insert value at index, so current item at that index is pointed to by new item at index
***** TODO erase(index) - removes node at given index
***** TODO value_n_from_end(n) - returns the value of the node at nth position from the end of the list
***** TODO reverse() - reverses the list
***** TODO remove_value(value) - removes the first item in the list with this value

*** TODO Doubly-linked List

    - [[https://www.coursera.org/lecture/data-structures/doubly-linked-lists-jpGKD][Description (video)]]
    - No need to implement

** Stack
      :PROPERTIES:
      :CUSTOM_ID: stack
      :END:

*** TODO [[https://www.coursera.org/lecture/data-structures/stacks-UdKzQ][Stacks (video)]]
*** TODO [[https://archive.org/details/0102WhatYouShouldKnow/05_01-usingStacksForLast-inFirst-out.mp4][Using Stacks Last-In First-Out (video)]]
*** TODO Will not implement. Implementing with array is trivial.

** Queue
      :PROPERTIES:
      :CUSTOM_ID: queue
      :END:

*** TODO [[https://archive.org/details/0102WhatYouShouldKnow/05_03-usingQueuesForFirst-inFirst-out.mp4][Using Queues First-In First-Out(video)]]
*** TODO [[https://www.coursera.org/lecture/data-structures/queues-EShpq][Queue (video)]]
*** TODO [[https://en.wikipedia.org/wiki/Circular_buffer][Circular buffer/FIFO]]
*** TODO [[https://archive.org/details/0102WhatYouShouldKnow/05_04-priorityQueuesAndDeques.mp4][Priority Queues (video)]]
*** TODO Implement using linked-list, with tail pointer:

    - enqueue(value) - adds value at position at tail
    - dequeue() - returns value and removes least recently added element (front)
    - empty()

*** TODO Implement using fixed-sized array:

    - enqueue(value) - adds item at end of available storage
    - dequeue() - returns value and removes least recently added element
    - empty()
    - full()

*** TODO Cost:

    - a bad implementation using linked list where you enqueue at head and dequeue at tail would be O(n) because you'd need the next to last element, causing a full traversal each dequeue
    - enqueue: O(1) (amortized, linked list and array [probing])
    - dequeue: O(1) (linked list and array)
    - empty: O(1) (linked list and array)

** Hash table
      :PROPERTIES:
      :CUSTOM_ID: hash-table
      :END:

*** TODO Videos:

***** TODO [[https://www.youtube.com/watch?v=0M_kIqhwbFo&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=8][Hashing with Chaining (video)]]
***** TODO [[https://www.youtube.com/watch?v=BRO7mVIFt08&index=9&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb][Table Doubling, Karp-Rabin (video)]]
***** TODO [[https://www.youtube.com/watch?v=rvdJDijO2Ro&index=10&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb][Open Addressing, Cryptographic Hashing (video)]]
***** TODO [[https://www.youtube.com/watch?v=C4Kc8xzcA68][PyCon 2010: The Mighty Dictionary (video)]]
***** TODO [[https://www.youtube.com/watch?v=z0lJ2k0sl1g&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=11][(Advanced) Randomization: Universal & Perfect Hashing (video)]]
***** TODO [[https://www.youtube.com/watch?v=N0COwN14gt0&list=PL2B4EEwhKD-NbwZ4ezj7gyc_3yNrojKM9&index=4][(Advanced) Perfect hashing (video)]]

*** TODO Online Courses:

***** TODO [[https://archive.org/details/0102WhatYouShouldKnow/06_02-understandingHashFunctions.mp4][Understanding Hash Functions (video)]]
***** TODO [[https://archive.org/details/0102WhatYouShouldKnow/06_03-usingHashTables.mp4][Using Hash Tables (video)]]
***** TODO [[https://archive.org/details/0102WhatYouShouldKnow/06_04-supportingHashing.mp4][Supporting Hashing (video)]]
***** TODO [[https://archive.org/details/0102WhatYouShouldKnow/06_05-languageSupportForHashTables.mp4][Language Support Hash Tables (video)]]
***** TODO [[https://www.coursera.org/lecture/data-structures-optimizing-performance/core-hash-tables-m7UuP][Core Hash Tables (video)]]
***** TODO [[https://www.coursera.org/learn/data-structures/home/week/4][Data Structures (video)]]
***** TODO [[https://www.coursera.org/lecture/data-structures/phone-book-problem-NYZZP][Phone Book Problem (video)]]
***** TODO distributed hash tables:
- [[https://www.coursera.org/lecture/data-structures/instant-uploads-and-storage-optimization-in-dropbox-DvaIb][Instant Uploads And Storage Optimization In Dropbox (video)]]
- [[https://www.coursera.org/lecture/data-structures/distributed-hash-tables-tvH8H][Distributed Hash Tables (video)]]

*** TODO Implement with array using linear probing

    - hash(k, m) - m is size of hash table
    - add(key, value) - if key already exists, update value
    - exists(key)
    - get(key)
    - remove(key)

* More Knowledge
   :PROPERTIES:
   :CUSTOM_ID: more-knowledge
   :END:

** Binary search
      :PROPERTIES:
      :CUSTOM_ID: binary-search
      :END:

*** TODO [[https://www.youtube.com/watch?v=D5SrAga1pno][Binary Search (video)]]
*** TODO [[https://www.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search][Binary Search (video)]]
*** TODO [[https://www.topcoder.com/community/competitive-programming/tutorials/binary-search/][detail]]
*** TODO Implement:

    - binary search (on sorted array of integers)
    - binary search using recursion

** Bitwise operations
      :PROPERTIES:
      :CUSTOM_ID: bitwise-operations
      :END:

*** TODO [[https://github.com/jwasham/coding-interview-university/blob/master/extras/cheat%20sheets/bits-cheat-sheet.pdf][Bits cheat sheet]] - you should know many of the powers of 2 from (2^1 to 2^16 and 2^32)
*** TODO Get a really good understanding of manipulating bits with: &, |, ^, ~, >>, <<

***** TODO [[https://en.wikipedia.org/wiki/Word_(computer_architecture)][words]]
***** TODO Good intro: [[https://www.youtube.com/watch?v=7jkIUgLC29I][Bit Manipulation (video)]]
***** TODO [[https://www.youtube.com/watch?v=d0AwjSpNXR0][C Programming Tutorial 2-10: Bitwise Operators (video)]]
***** TODO [[https://en.wikipedia.org/wiki/Bit_manipulation][Bit Manipulation]]
***** TODO [[https://en.wikipedia.org/wiki/Bitwise_operation][Bitwise Operation]]
***** TODO [[https://graphics.stanford.edu/~seander/bithacks.html][Bithacks]]
***** TODO [[https://bits.stephan-brumme.com/][The Bit Twiddler]]
***** TODO [[https://bits.stephan-brumme.com/interactive.html][The Bit Twiddler Interactive]]
***** TODO [[https://www.youtube.com/watch?v=ZusiKXcz_ac][Bit Hacks (video)]]

*** TODO 2s and 1s complement

    - [[https://www.youtube.com/watch?v=lKTsv6iVxV4][Binary: Plusses & Minuses (Why We Use Two's Complement) (video)]]
    - [[https://en.wikipedia.org/wiki/Ones%27_complement][1s Complement]]
    - [[https://en.wikipedia.org/wiki/Two%27s_complement][2s Complement]]

*** TODO Count set bits

    - [[https://youtu.be/Hzuzo9NJrlc][4 ways to count bits in a byte (video)]]
    - [[https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan][Count Bits]]
    - [[http://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer][How To Count The Number Of Set Bits In a 32 Bit Integer]]

*** TODO Swap values:

    - [[https://bits.stephan-brumme.com/swap.html][Swap]]

*** TODO Absolute value:

    - [[https://bits.stephan-brumme.com/absInteger.html][Absolute Integer]]

* Trees
   :PROPERTIES:
   :CUSTOM_ID: trees
   :END:

** Trees - Notes & Background
      :PROPERTIES:
      :CUSTOM_ID: trees---notes-background
      :END:

*** TODO [[https://www.coursera.org/lecture/data-structures-optimizing-performance/core-trees-ovovP][Series: Core Trees (video)]]
*** TODO [[https://www.coursera.org/lecture/data-structures/trees-95qda][Series: Trees (video)]]
  - basic tree construction
  - traversal
  - manipulation algorithms
*** TODO [[https://www.youtube.com/watch?v=uWL6FJhq5fM][BFS(breadth-first search) and DFS(depth-first search) (video)]]

    - BFS notes:

      - level order (BFS, using queue)
      - time complexity: O(n)
      - space complexity: best: O(1), worst: O(n/2)=O(n)

    - DFS notes:

      - time complexity: O(n)
      - space complexity: best: O(log n) - avg. height of tree worst: O(n)
      - inorder (DFS: left, self, right)
      - postorder (DFS: left, right, self)
      - preorder (DFS: self, left, right)

** Binary search trees: BSTs
      :PROPERTIES:
      :CUSTOM_ID: binary-search-trees-bsts
      :END:

*** TODO [[https://www.youtube.com/watch?v=x6At0nzX92o&index=1&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6][Binary Search Tree Review (video)]]
*** TODO [[https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/p82sw/core-introduction-to-binary-search-trees][Series (video)]]

    - starts with symbol table and goes through BST applications

*** TODO [[https://www.coursera.org/learn/data-structures/lecture/E7cXP/introduction][Introduction (video)]]
*** TODO [[https://www.youtube.com/watch?v=9Jry5-82I68][MIT (video)]]
  - C/C++:

***** TODO [[https://www.youtube.com/watch?v=COZK7NATh4k&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=28][Binary search tree - Implementation in C/C++ (video)]]
***** TODO [[https://www.youtube.com/watch?v=hWokyBoo0aI&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=29][BST implementation - memory allocation in stack and heap (video)]]
***** TODO [[https://www.youtube.com/watch?v=Ut90klNN264&index=30&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P][Find min and max element in a binary search tree (video)]]
***** TODO [[https://www.youtube.com/watch?v=_pnqMz5nrRs&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=31][Find height of a binary tree (video)]]
***** TODO [[https://www.youtube.com/watch?v=9RHO6jU--GU&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=32][Binary tree traversal - breadth-first and depth-first strategies (video)]]
***** TODO [[https://www.youtube.com/watch?v=86g8jAQug04&index=33&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P][Binary tree: Level Order Traversal (video)]]
***** TODO [[https://www.youtube.com/watch?v=gm8DUJJhmY4&index=34&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P][Binary tree traversal: Preorder, Inorder, Postorder (video)]]
***** TODO [[https://www.youtube.com/watch?v=yEwSGhSsT0U&index=35&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P][Check if a binary tree is binary search tree or not (video)]]
***** TODO [[https://www.youtube.com/watch?v=gcULXE7ViZw&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=36][Delete a node from Binary Search Tree (video)]]
***** TODO [[https://www.youtube.com/watch?v=5cPbNCrdotA&index=37&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P][Inorder Successor in a binary search tree (video)]]

*** TODO Implement:

***** TODO insert // insert value into tree
***** TODO get_node_count // get count of values stored
***** TODO print_values // prints the values in the tree, from min to max
***** TODO delete_tree
***** TODO is_in_tree // returns true if given value exists in the tree
***** TODO get_height // returns the height in nodes (single node's height is 1)
***** TODO get_min // returns the minimum value stored in the tree
***** TODO get_max // returns the maximum value stored in the tree
***** TODO is_binary_search_tree
***** TODO delete_value
***** TODO get_successor // returns next-highest value in tree after given value, -1 if none

** Heap / Priority Queue / Binary Heap
      :PROPERTIES:
      :CUSTOM_ID: heap-priority-queue-binary-heap
      :END:

  - visualized as a tree, but is usually linear in storage (array, linked list)
*** TODO [[https://en.wikipedia.org/wiki/Heap_(data_structure)][Heap]]
*** TODO [[https://www.coursera.org/learn/data-structures/lecture/2OpTs/introduction][Introduction (video)]]
*** TODO [[https://www.coursera.org/learn/data-structures/lecture/z3l9N/naive-implementations][Naive Implementations (video)]]
*** TODO [[https://www.coursera.org/learn/data-structures/lecture/GRV2q/binary-trees][Binary Trees (video)]]
*** TODO [[https://www.coursera.org/learn/data-structures/supplement/S5xxz/tree-height-remark][Tree Height Remark (video)]]
*** TODO [[https://www.coursera.org/learn/data-structures/lecture/0g1dl/basic-operations][Basic Operations (video)]]
*** TODO [[https://www.coursera.org/learn/data-structures/lecture/gl5Ni/complete-binary-trees][Complete Binary Trees (video)]]
*** TODO [[https://www.coursera.org/learn/data-structures/lecture/HxQo9/pseudocode][Pseudocode (video)]]
*** TODO [[https://youtu.be/odNJmw5TOEE?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=3291][Heap Sort - jumps to start (video)]]
*** TODO [[https://www.coursera.org/learn/data-structures/lecture/hSzMO/heap-sort][Heap Sort (video)]]
*** TODO [[https://www.coursera.org/learn/data-structures/lecture/dwrOS/building-a-heap][Building a heap (video)]]
*** TODO [[https://www.youtube.com/watch?v=B7hVxCmfPtM&index=4&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb][MIT: Heaps and Heap Sort (video)]]
*** TODO [[https://archive.org/details/ucberkeley_webcast_yIUFT6AKBGE][CS 61B Lecture 24: Priority Queues (video)]]
*** TODO [[https://www.youtube.com/watch?v=MiyLo8adrWw][Linear Time BuildHeap (max-heap)]]
*** TODO Implement a max-heap:
***** TODO insert
***** TODO sift_up - needed for insert
***** TODO get_max - returns the max item, without removing it
***** TODO get_size() - return number of elements stored
***** TODO is_empty() - returns true if heap contains no elements
***** TODO extract_max - returns the max item, removing it
***** TODO sift_down - needed for extract_max
***** TODO remove(i) - removes item at index x
***** TODO heapify - create a heap from an array of elements, needed for heap_sort
***** TODO heap_sort() - take an unsorted array and turn it into a sorted array in-place using a max heap or min heap

* Sorting
   :PROPERTIES:
   :CUSTOM_ID: sorting
   :END:

** TODO Notes:

    - Implement sorts & know best case/worst case, average complexity of each:

    - no bubble sort - it's terrible - O(n^2), except when n <= 16

** TODO Stability in sorting algorithms ("Is Quicksort stable?")
- [[https://en.wikipedia.org/wiki/Sorting_algorithm#Stability][Sorting Algorithm Stability]]
- [[http://stackoverflow.com/questions/1517793/stability-in-sorting-algorithms][Stability In Sorting Algorithms]]
- [[http://www.geeksforgeeks.org/stability-in-sorting-algorithms/][Stability In Sorting Algorithms]]
- [[http://homepages.math.uic.edu/~leon/cs-mcs401-s08/handouts/stability.pdf][Sorting Algorithms - Stability]]
** TODO Which algorithms can be used on linked lists? Which on arrays? Which on both?
- I wouldn't recommend sorting a linked list, but merge sort is doable.
- [[http://www.geeksforgeeks.org/merge-sort-for-linked-list/][Merge Sort For Linked List]]
- For heapsort, see Heap data structure above. Heap sort is great, but not stable.

** TODO [[https://www.coursera.org/learn/algorithms-part1/home/week/3][Sedgewick - Mergesort (5 videos)]]

*** TODO [[https://www.coursera.org/learn/algorithms-part1/lecture/ARWDq/mergesort][1. Mergesort]]
*** TODO [[https://www.coursera.org/learn/algorithms-part1/lecture/PWNEl/bottom-up-mergesort][2. Bottom up Mergesort]]
*** TODO [[https://www.coursera.org/learn/algorithms-part1/lecture/xAltF/sorting-complexity][3. Sorting Complexity]]
*** TODO [[https://www.coursera.org/learn/algorithms-part1/lecture/9FYhS/comparators][4. Comparators]]
*** TODO [[https://www.coursera.org/learn/algorithms-part1/lecture/pvvLZ/stability][5. Stability]]

** TODO [[https://www.coursera.org/learn/algorithms-part1/home/week/3][Sedgewick - Quicksort (4 videos)]]

*** TODO [[https://www.coursera.org/learn/algorithms-part1/lecture/vjvnC/quicksort][1. Quicksort]]
*** TODO [[https://www.coursera.org/learn/algorithms-part1/lecture/UQxFT/selection][2. Selection]]
*** TODO [[https://www.coursera.org/learn/algorithms-part1/lecture/XvjPd/duplicate-keys][3. Duplicate Keys]]
*** TODO [[https://www.coursera.org/learn/algorithms-part1/lecture/QBNZ7/system-sorts][4. System Sorts]]

** TODO UC Berkeley:

*** TODO [[https://archive.org/details/ucberkeley_webcast_EiUvYS2DT6I][CS 61B Lecture 29: Sorting I (video)]]
*** TODO [[https://archive.org/details/ucberkeley_webcast_2hTY3t80Qsk][CS 61B Lecture 30: Sorting II (video)]]
*** TODO [[https://archive.org/details/ucberkeley_webcast_Y6LOLpxg6Dc][CS 61B Lecture 32: Sorting III (video)]]
*** TODO [[https://archive.org/details/ucberkeley_webcast_qNMQ4ly43p4][CS 61B Lecture 33: Sorting V (video)]]

** TODO [[https://www.youtube.com/watch?v=P00xJgWzz2c&index=1&list=PL89B61F78B552C1AB][Bubble Sort (video)]]

** TODO [[https://www.youtube.com/watch?v=ni_zk257Nqo&index=7&list=PL89B61F78B552C1AB][Analyzing Bubble Sort (video)]]

** TODO [[https://www.youtube.com/watch?v=Kg4bqzAqRBM&index=3&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb][Insertion Sort, Merge Sort (video)]]

** TODO [[https://www.youtube.com/watch?v=c4BRHC7kTaQ&index=2&list=PL89B61F78B552C1AB][Insertion Sort (video)]]

** TODO [[https://www.youtube.com/watch?v=GCae1WNvnZM&index=3&list=PL89B61F78B552C1AB][Merge Sort (video)]]

** TODO [[https://www.youtube.com/watch?v=y_G9BkAm6B8&index=4&list=PL89B61F78B552C1AB][Quicksort (video)]]

** TODO [[https://www.youtube.com/watch?v=6nDMgr0-Yyo&index=8&list=PL89B61F78B552C1AB][Selection Sort (video)]]

** TODO Merge sort code:

*** TODO [[http://www.cs.yale.edu/homes/aspnes/classes/223/examples/sorting/mergesort.c][Using output array (C)]]
*** TODO [[https://github.com/jwasham/practice-python/blob/master/merge_sort/merge_sort.py][Using output array (Python)]]
*** TODO [[https://github.com/jwasham/practice-cpp/blob/master/merge_sort/merge_sort.cc][In-place (C++)]]

** TODO Quick sort code:

*** TODO [[http://www.cs.yale.edu/homes/aspnes/classes/223/examples/randomization/quick.c][Implementation (C)]]
*** TODO [[https://github.com/jwasham/practice-c/blob/master/quick_sort/quick_sort.c][Implementation (C)]]
*** TODO [[https://github.com/jwasham/practice-python/blob/master/quick_sort/quick_sort.py][Implementation (Python)]]

** TODO Implement:

*** TODO Mergesort: O(n log n) average and worst case
*** TODO Quicksort O(n log n) average case
  - Selection sort and insertion sort are both O(n^2) average and worst case
  - For heapsort, see Heap data structure above.

** TODO Not required, but I recommended them:

*** TODO [[https://www.coursera.org/learn/algorithms-part2/home/week/3][Sedgewick - Radix Sorts (6 videos)]]

**** TODO [[https://www.coursera.org/learn/algorithms-part2/lecture/vGHvb/strings-in-java][1. Strings in Java]]
**** TODO [[https://www.coursera.org/learn/algorithms-part2/lecture/2pi1Z/key-indexed-counting][2. Key Indexed Counting]]
**** TODO [[https://www.coursera.org/learn/algorithms-part2/lecture/c1U7L/lsd-radix-sort][3. Least Significant Digit First String Radix Sort]]
**** TODO [[https://www.coursera.org/learn/algorithms-part2/lecture/gFxwG/msd-radix-sort][4. Most Significant Digit First String Radix Sort]]
**** TODO [[https://www.coursera.org/learn/algorithms-part2/lecture/crkd5/3-way-radix-quicksort][5. 3 Way Radix Quicksort]]
**** TODO [[https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays][6. Suffix Arrays]]

*** TODO [[http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#radixSort][Radix Sort]]
*** TODO [[https://www.youtube.com/watch?v=xhr26ia4k38][Radix Sort (video)]]
*** TODO [[https://www.youtube.com/watch?v=Nz1KZXbghj8&index=7&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb][Radix Sort, Counting Sort (linear time given constraints) (video)]]
*** TODO [[https://www.youtube.com/watch?v=cNB2lADK3_s&index=8&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp][Randomization: Matrix Multiply, Quicksort, Freivalds' algorithm (video)]]
*** TODO [[https://www.youtube.com/watch?v=pOKy3RZbSws&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&index=14][Sorting in Linear Time (video)]]

As a summary, here is a visual representation of [[https://www.youtube.com/watch?v=kPRA0W1kECg][15 sorting algorithms]]. If you need more detail on this subject, see "Sorting" section in [[#additional-detail-on-some-subjects][Additional Detail on Some Subjects]]

* Graphs
   :PROPERTIES:
   :CUSTOM_ID: graphs
   :END:

Graphs can be used to represent many problems in computer science, so this section is long, like trees and sorting were.

- Notes:

  - There are 4 basic ways to represent a graph in memory:

    - objects and pointers
    - adjacency matrix
    - adjacency list
    - adjacency map

  - Familiarize yourself with each representation and its pros & cons
  - BFS and DFS - know their computational complexity, their trade offs, and how to implement them in real code
  - When asked a question, look for a graph-based solution first, then move on if none.

** TODO MIT(videos):

*** TODO [[https://www.youtube.com/watch?v=s-CYnVz-uh4&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=13][Breadth-First Search]]
*** TODO [[https://www.youtube.com/watch?v=AfSk24UTFS8&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=14][Depth-First Search]]

** TODO Skiena Lectures - great intro:

*** TODO [[https://www.youtube.com/watch?v=OiXxhDrFruw&list=PLOtl7M3yp-DV69F32zdK7YJcNXpTunF2b&index=11][CSE373 2012 - Lecture 11 - Graph Data Structures (video)]]
*** TODO [[https://www.youtube.com/watch?v=g5vF8jscteo&list=PLOtl7M3yp-DV69F32zdK7YJcNXpTunF2b&index=12][CSE373 2012 - Lecture 12 - Breadth-First Search (video)]]
*** TODO [[https://www.youtube.com/watch?v=S23W6eTcqdY&list=PLOtl7M3yp-DV69F32zdK7YJcNXpTunF2b&index=13][CSE373 2012 - Lecture 13 - Graph Algorithms (video)]]
*** TODO [[https://www.youtube.com/watch?v=WitPBKGV0HY&index=14&list=PLOtl7M3yp-DV69F32zdK7YJcNXpTunF2b][CSE373 2012 - Lecture 14 - Graph Algorithms (con't) (video)]]
*** TODO [[https://www.youtube.com/watch?v=ia1L30l7OIg&index=15&list=PLOtl7M3yp-DV69F32zdK7YJcNXpTunF2b][CSE373 2012 - Lecture 15 - Graph Algorithms (con't 2) (video)]]
*** TODO [[https://www.youtube.com/watch?v=jgDOQq6iWy8&index=16&list=PLOtl7M3yp-DV69F32zdK7YJcNXpTunF2b][CSE373 2012 - Lecture 16 - Graph Algorithms (con't 3) (video)]]

** TODO Graphs (review and more):

*** TODO [[https://www.youtube.com/watch?v=Aa2sqUhIn-E&index=15&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb][6.006 Single-Source Shortest Paths Problem (video)]]
*** TODO [[https://www.youtube.com/watch?v=2E7MmKv0Y24&index=16&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb][6.006 Dijkstra (video)]]
*** TODO [[https://www.youtube.com/watch?v=ozsuci5pIso&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=17][6.006 Bellman-Ford (video)]]
*** TODO [[https://www.youtube.com/watch?v=CHvQ3q_gJ7E&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=18][6.006 Speeding Up Dijkstra (video)]]
*** TODO [[https://www.youtube.com/watch?v=i_AQT_XfvD8&index=6&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm][Aduni: Graph Algorithms I - Topological Sorting, Minimum Spanning Trees, Prim's Algorithm - Lecture 6 (video)]]
*** TODO [[https://www.youtube.com/watch?v=ufj5_bppBsA&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=7][Aduni: Graph Algorithms II - DFS, BFS, Kruskal's Algorithm, Union Find Data Structure - Lecture 7 (video)]]
*** TODO [[https://www.youtube.com/watch?v=DiedsPsMKXc&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=8][Aduni: Graph Algorithms III: Shortest Path - Lecture 8 (video)]]
*** TODO [[https://www.youtube.com/watch?v=XIAQRlNkJAw&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=9][Aduni: Graph Alg. IV: Intro to geometric algorithms - Lecture 9 (video)]]
*** TODO +[[https://youtu.be/dgjX4HdMI-Q?list=PL-XXv-cvA_iAlnI-BQr9hjqADPBtujFJd&t=3489][CS 61B 2014 (starting at 58:09) (video)]]+
*** TODO [[https://archive.org/details/ucberkeley_webcast_zFbq8vOZ_0k][CS 61B 2014: Weighted graphs (video)]]
*** TODO [[https://www.youtube.com/watch?v=tKwnms5iRBU&index=16&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp][Greedy Algorithms: Minimum Spanning Tree (video)]]
*** TODO [[https://www.youtube.com/watch?v=RpgcYiky7uw][Strongly Connected Components Kosaraju's Algorithm Graph Algorithm (video)]]
*** TODO [[https://www.coursera.org/learn/algorithms-on-graphs/home/welcome][Algorithms on Graphs (video)]]

** I'll implement:

*** TODO DFS with adjacency list (recursive)
*** TODO DFS with adjacency list (iterative with stack)
*** TODO DFS with adjacency matrix (recursive)
*** TODO DFS with adjacency matrix (iterative with stack)
*** TODO BFS with adjacency list
*** TODO BFS with adjacency matrix
*** TODO single-source shortest path (Dijkstra)
*** TODO minimum spanning tree
*** DFS-based algorithms (see Aduni videos above):
**** TODO check for cycle (needed for topological sort, since we'll check for cycle before starting)
**** TODO topological sort
**** TODO count connected components in a graph
**** TODO list strongly connected components
**** TODO check for bipartite graph

